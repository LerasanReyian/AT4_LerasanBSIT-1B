/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Login;

import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

public class delete extends javax.swing.JFrame {
    //creating a method (filepath) to store user credentials
    private static String filepath2 = "E:\\Downloads\\Login\\src\\Login\\users.json";

    public delete() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        javax.swing.JButton homebot = new javax.swing.JButton();
        javax.swing.JButton deletebot = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(106, 156, 137));

        table.setBackground(new java.awt.Color(193, 216, 195));
        table.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        table.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Password"
            }
        ));
        jScrollPane1.setViewportView(table);

        homebot.setBackground(new java.awt.Color(255, 218, 179));
        homebot.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        homebot.setForeground(new java.awt.Color(102, 102, 102));
        homebot.setText("Home");
        homebot.setToolTipText("");
        homebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homebotActionPerformed(evt);
            }
        });

        deletebot.setBackground(new java.awt.Color(255, 218, 179));
        deletebot.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        deletebot.setForeground(new java.awt.Color(102, 102, 102));
        deletebot.setText("Delete");
        deletebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(deletebot)
                .addGap(164, 164, 164)
                .addComponent(homebot)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deletebot, homebot});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletebot)
                    .addComponent(homebot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deletebot, homebot});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //this button wile create an event where it fires up to delete rows inside the table
    private void deletebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebotActionPerformed
        int row = table.getSelectedRow();//grabbing/getting the selected row

        if (row < 0) {
            //this will pop-up if it detects na walay gi select na row ang user
            JOptionPane.showMessageDialog(this, "No row is selected! Please select a row.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) table.getModel();//grabbing the table model
            model.removeRow(row);//removing the selected row from the table 
            saveJsonData();//saving the actions/data back to json data 
        }
    }//GEN-LAST:event_deletebotActionPerformed
//this button is use to fire back to welcome window
    private void homebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homebotActionPerformed
        welcome well = new welcome();//nag instantiate ko diri ug well short for welcome window
        well.setVisible(true);//set visibility to true
        well.pack();//remain in size
        well.setLocationRelativeTo(null);//maintaining to the center of the screen
        this.dispose();// dispose after it use or if the user wants to go to another windows 
    }//GEN-LAST:event_homebotActionPerformed
    //this method is use to save the data back to the json file after an event
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveJsonData();//calling the method saveJsonData

    }//GEN-LAST:event_formWindowClosing
    //this method loads the data from json to the table 
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadJsonData();//calling the method loadJsonData in which reads the json file and loads the user data into the table
    }//GEN-LAST:event_formWindowOpened
    // //this method loads the user data from the json file and then it will display in the table 
    private void loadJsonData() {
        JSONParser parser = new JSONParser();//instatiating new json parser identifier
        
        try (FileReader reader = new FileReader(filepath2)) {//this line will trying to oopen the json file
            Object obj = parser.parse(reader);//parsing the json file and storing to object
            if (obj instanceof JSONObject) {
                JSONObject jsonObject = (JSONObject) obj;//casting the object (parsed obj) to JSONObject
                JSONArray usersArray = (JSONArray) jsonObject.get("users");//getting or extracting the "users" (users from the json) array
                DefaultTableModel model = (DefaultTableModel) table.getModel();//getting the table or jtable and clear existing data
                if (usersArray != null) {//checking if the array is not null or empty or if the user exsist it will repeat  through each user object
                    for (Object userObj : usersArray) {// this will recaping the user object
                        JSONObject userObject = (JSONObject) userObj;// store the user and password to this jsonObj
                        String user = (String) userObject.get("user");//extracting the user from the json
                        String password = (String) userObject.get("password");//this also extracting the password from the json
                        model.addRow(new Object[]{user, password});// this will add another row to the table
                    }
                }
            }
            //error handling to avoid crashing the whole program
        } catch (IOException | ParseException e) {
            System.err.println("Error loading JSON data: " + e.getMessage());//error handling message
        }
    }
    //this method will save the edited/table data back to the jsonfile (filepath2)
    private void saveJsonData() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();//grabbing or getting the table model
        JSONArray usersArray = new JSONArray();//naghimo ko ug json array to store user data
        for (int i = 0; i < model.getRowCount(); i++) {//this row will loop sa mga table rows
            JSONObject userObject = new JSONObject();//this row is use to store each row into obj
            userObject.put("user", model.getValueAt(i, 0));//diri ang function niya is to stored username/user back to json file
            userObject.put("password", model.getValueAt(i, 1));//also diri i will stored the passowrd abck to json file
            usersArray.add(userObject);//kani is to add new obj to json array
        }
       JSONObject jsonObject = new JSONObject();//kani kay bura ni syag main json obj nako 
        jsonObject.put("users", usersArray);//kani is to add user array directly to json obj
        //I surrounded the savinig process with try and catch to avoid crashing the system/program and handles errors 
        try (FileWriter file = new FileWriter(filepath2)) {//diri i created a new identifier for FileWriter specifically 'file' and open json file with the use of file identifier
            file.write(jsonObject.toJSONString());//diri is simply gina overrride niya ang data sa json sa file identifier it's more sounds like gina edit
            file.flush();//this method is used to clear/flush data to file, neither accepts any parameter nor returns any value
        } catch (IOException e) {
            System.err.println("Error saving JSON data: " + e.getMessage());// error handling message
        }
    }

    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new delete().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
